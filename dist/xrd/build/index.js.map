{"version":3,"sources":["index.js"],"names":["build","dir","dev","config","distDir","path","join","entrypoints","promises","mkdir","recursive","clientWebpackConfig","serverWebpackConfig","Promise","all","target","client","server","result","errors","length","Error","warnings","console","log","chalk","yellow","green","error","red","message"],"mappings":"2DAAA,kDACA,oDACA,sBACA,gEAKA,kCACA,uEACA,oCACA,wF,mFAPA;AACA;AACA;AACA;AAMe,cAAeA,CAAAA,KAAf,CAAqBC,GAArB,CAA0B,CACvCC,GAAG,CAAG,KADiC,CAA1B,CAEZ,CACC,KAAMC,CAAAA,MAAM,CAAG,oBAAWF,GAAX,CAAf,CACA,KAAMG,CAAAA,OAAO,CAAGC,cAAKC,IAAL,CAAUL,GAAV,CAAeE,MAAM,CAACC,OAAtB,CAAhB,CACA;AAEA;AACA;AACA,KAAMG,CAAAA,WAAW,CAAG,+BAAkB,CAACL,GAAD,CAAlB,CAApB,CAGA,KAAMM,cAASC,KAAT,CAAeL,OAAf,CAAwB,CAAEM,SAAS,CAAE,IAAb,CAAxB,CAAN,CACA,GAAI,CACF,KAAM,CAACC,mBAAD,CAAsBC,mBAAtB,EAA6C,KAAMC,CAAAA,OAAO,CAACC,GAAR,CAAY,CACnE,2BAAqBb,GAArB,CAA0B,CAACE,MAAD,CAASY,MAAM,CAAE,QAAjB,CAA2BR,WAAW,CAAEA,WAAW,CAACS,MAApD,CAA4Dd,GAA5D,CAA1B,CADmE,CAEnE,2BAAqBD,GAArB,CAA0B,CAACE,MAAD,CAASY,MAAM,CAAE,QAAjB,CAA2BR,WAAW,CAAEA,WAAW,CAACU,MAApD,CAA4Df,GAA5D,CAA1B,CAFmE,CAAZ,CAAzD,CAIA,GAAIA,GAAJ,CAAS,CACP,MAAO,MAAM,6BAAe,CAACS,mBAAD,CAAsBC,mBAAtB,CAAf,CAAb,CACD,CAFD,IAEO,CACL,GAAIM,CAAAA,MAAM,CAAG,KAAM,0BAAY,CAACP,mBAAD,CAAsBC,mBAAtB,CAAZ,CAAwD,CAAEV,GAAF,CAAxD,CAAnB,CACAgB,MAAM,CAAG,mCAAsBA,MAAtB,CAAT,CACA,GAAIA,MAAM,CAACC,MAAP,CAAcC,MAAd,CAAuB,CAA3B,CAA8B,CAC5B,KAAM,IAAIC,CAAAA,KAAJ,CAAUH,MAAM,CAACC,MAAP,CAAcb,IAAd,CAAmB,MAAnB,CAAV,CAAN,CACD,CACD,GAAIY,MAAM,CAACI,QAAP,CAAgBF,MAAhB,CAAyB,CAA7B,CAAgC,CAC9BG,OAAO,CAACC,GAAR,CAAYC,eAAMC,MAAN,CAAaR,MAAM,CAACI,QAAP,CAAgBhB,IAAhB,CAAqB,MAArB,CAAb,CAAZ,EACD,CACF,CACDiB,OAAO,CAACC,GAAR,CAAYC,eAAME,KAAN,CAAY,0BAAZ,CAAZ,EACD,CAAC,MAAOC,KAAP,CAAc,CACdL,OAAO,CAACK,KAAR,CAAcH,eAAMI,GAAN,CAAU,sBAAV,CAAd,EACAN,OAAO,CAACC,GAAR,CAAYC,eAAMI,GAAN,CAAUD,KAAK,CAACE,OAAhB,CAAZ,EACD,CAEJ","sourcesContent":["import path from 'path';\nimport chalk from 'chalk';\nimport { promises } from 'fs';\nimport loadConfig from '../server/config';\n// import {\n//     findPagesMapDir,\n//     collectPages\n// } from './utils'\nimport { createEntrypoints } from './entries';\nimport getBaseWebpackConfig from './webpack-config';\nimport { runCompiler, devRunCompiler } from './compiler';\nimport formatWebpackMessages from './format-webpack-messages';\n\nexport default async function build(dir, {\n  dev = false\n}) {\n    const config = loadConfig(dir);\n    const distDir = path.join(dir, config.distDir)\n    // const pagesMapDir = findPagesMapDir(dir);\n    \n    // const mappedPages = await collectPages(pagesMapDir, dir);\n    // const entrypoints = createEntrypoints(mappedPages);\n    const entrypoints = createEntrypoints({dev});\n    \n    \n    await promises.mkdir(distDir, { recursive: true })\n    try {\n      const [clientWebpackConfig, serverWebpackConfig] = await Promise.all([\n        getBaseWebpackConfig(dir, {config, target: 'client', entrypoints: entrypoints.client, dev}),\n        getBaseWebpackConfig(dir, {config, target: 'server', entrypoints: entrypoints.server, dev})\n      ])\n      if (dev) {\n        return await devRunCompiler([clientWebpackConfig, serverWebpackConfig]);\n      } else {\n        let result = await runCompiler([clientWebpackConfig, serverWebpackConfig], { dev });\n        result = formatWebpackMessages(result);\n        if (result.errors.length > 0) {\n          throw new Error(result.errors.join('\\n\\n'))\n        }\n        if (result.warnings.length > 0) {\n          console.log(chalk.yellow(result.warnings.join('\\n\\n')))\n        }\n      }\n      console.log(chalk.green('Compiled successfully.\\n'))\n    } catch (error) {\n      console.error(chalk.red('Failed to compile.\\n'))\n      console.log(chalk.red(error.message))\n    }    \n    \n}"]}