{"version":3,"sources":["controller.js"],"names":["Controller","preload","ssr","Loadable","preloadAll","handleRequest","req","res","parsedUrl","url","haCon","apiReg","test","pathname","console","log","end","startsWith","dev","write","mfs","readFileSync","distDir","slice","length","fs","query","run","err","error","statusCode","init","dir","conf","rootDir","Document","entryFiles","Ssr","clientBundles","require","REACT_LOADABLE_MANIFEST","SERVER_DIRECTORY","DOCUMENTJS","default","ENTRY_FILES","SERVEROUTPUT"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { join, resolve } from 'path';\nimport fs from 'fs';\nimport { parse as parseQs, ParsedUrlQuery } from 'querystring'\nimport { parse as parseUrl } from 'url'\nimport loadConfig from './config'\nimport { ENTRY_FILES, REACT_LOADABLE_MANIFEST, SERVER_DIRECTORY, DOCUMENTJS, SERVEROUTPUT } from '../lib/constants';\nimport build from '../build';\n\nexport default class Controller {\n    async init({\n      dir = '.',\n      conf = null,\n      dev = false\n    }) {\n      const rootDir = resolve(dir);\n      this.dev = dev;\n      this.haCon = loadConfig(rootDir, conf);\n      this.distDir = join(rootDir, this.haCon.distDir);\n      if (dev) {\n        const { \n          Document,\n          entryFiles,\n          Ssr,\n          clientBundles,\n          mfs,\n        } = await build(rootDir, {dev});\n        this.clientBundles = clientBundles;\n        this.Document = Document;\n        this.entryFiles = entryFiles;\n        this.Ssr = Ssr;\n        this.mfs = mfs;\n      } else {\n        this.clientBundles = require(join(this.distDir, REACT_LOADABLE_MANIFEST));\n        this.Document = require(join(this.distDir, SERVER_DIRECTORY, DOCUMENTJS)).default;\n        this.entryFiles = require(join(this.distDir, ENTRY_FILES)).default;\n        this.Ssr = require(join(this.distDir, SERVER_DIRECTORY, SERVEROUTPUT)).default;\n      }\n      this.ssr = new this.Ssr({\n        rootDir,\n        distDir: this.distDir,\n        Document: this.Document,\n        entryFiles: this.entryFiles,\n        clientBundles: this.clientBundles\n      });\n    }\n\n    preload = async () => {\n      await this.ssr.Loadable.preloadAll();\n    }\n\n    handleRequest = async (req, res, parsedUrl) => {\n        // Parse url if parsedUrl not provided\n        if (!parsedUrl || typeof parsedUrl !== 'object') {\n          parsedUrl = parseUrl(req.url, true)\n        }\n\n        // 检测是否为数据请求\n        if (this.haCon.apiReg.test(parsedUrl.pathname)) {\n            console.log('api接口', parsedUrl.pathname);\n            res.end();\n            return;\n        }\n\n        // 是否为静态文件\n        if (parsedUrl.pathname.startsWith('/dist')) {\n          if (this.dev) {\n            res.write(\n              this.mfs.readFileSync(\n                join(\n                  this.distDir,\n                  parsedUrl.pathname.slice('/dist/'.length)\n                ),\n                'utf8'\n              )\n            )\n          } else {\n            res.write(\n              fs.readFileSync(\n                join(\n                  this.distDir,\n                  parsedUrl.pathname.slice('/dist/'.length)\n                ),\n                'utf8'\n              )\n            )\n          }\n          return res.end()\n        }\n\n        if (parsedUrl.pathname === '/favicon.ico') {\n          res.end();\n          return;\n        }\n    \n        // Parse the querystring ourselves if the user doesn't handle querystring parsing\n        if (typeof parsedUrl.query === 'string') {\n          parsedUrl.query = parseQs(parsedUrl.query)\n        }\n\n    \n        try {\n          return await this.ssr.run(req, res, parsedUrl)\n        } catch (err) {\n          console.error(err)\n          res.statusCode = 500\n          res.end('Internal Server Error')\n        }\n    }\n    \n}"]}