{"version":3,"sources":["controller.js"],"names":["Controller","constructor","dir","staticMarkup","quiet","conf","dev","customServer","preload","ssr","Loadable","preloadAll","handleRequest","req","res","parsedUrl","url","haCon","apiReg","test","pathname","console","log","end","startsWith","write","fs","readFileSync","distDir","slice","length","query","run","err","error","statusCode","rootDir","then","clientBundles","require","REACT_LOADABLE_MANIFEST","Document","default","entryFiles","ENTRY_FILES","Ssr"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { join, resolve } from 'path';\nimport fs from 'fs';\nimport { parse as parseQs, ParsedUrlQuery } from 'querystring'\nimport { parse as parseUrl } from 'url'\nimport loadConfig from './config'\nimport { ENTRY_FILES, REACT_LOADABLE_MANIFEST } from '../lib/constants';\nimport build from '../build';\n\nexport default class Controller {\n    constructor({\n        dir = '.',\n        staticMarkup = false,\n        quiet = false,\n        conf = null,\n        dev = false,\n        customServer = true,\n    }) {\n        const rootDir = resolve(dir);\n        this.haCon = loadConfig(rootDir, conf);\n        this.distDir = join(rootDir, this.haCon.distDir);\n        if (dev) {\n          // dev 环境\n          build(rootDir, { dev }).then()\n        } else {\n          // pro 环境\n          this.clientBundles = require(join(this.distDir, REACT_LOADABLE_MANIFEST));\n          const Document = require(join(this.distDir, 'server/_document.js')).default;\n          const entryFiles = require(join(this.distDir, ENTRY_FILES)).default;\n          const Ssr = require(join(this.distDir, 'server/server.js')).default;\n          this.ssr = new Ssr({\n            rootDir,\n            distDir: this.distDir,\n            Document,\n            entryFiles,\n            clientBundles: this.clientBundles\n          });\n        }\n        \n    }\n\n    preload = async () => {\n      await this.ssr.Loadable.preloadAll();\n    }\n\n    handleRequest = async (req, res, parsedUrl) => {\n        // Parse url if parsedUrl not provided\n        if (!parsedUrl || typeof parsedUrl !== 'object') {\n          parsedUrl = parseUrl(req.url, true)\n        }\n\n        // 检测是否为数据请求\n        if (this.haCon.apiReg.test(parsedUrl.pathname)) {\n            console.log('api接口', parsedUrl.pathname);\n            res.end();\n            return;\n        }\n\n        // 是否为静态文件\n        if (parsedUrl.pathname.startsWith('/dist')) {\n          res.write(\n            fs.readFileSync(\n              join(\n                this.distDir,\n                parsedUrl.pathname.slice('/dist/'.length)\n              ),\n              'utf8'\n            )\n          )\n          return res.end()\n        }\n\n        if (parsedUrl.pathname === '/favicon.ico') {\n          res.end();\n          return;\n        }\n    \n        // Parse the querystring ourselves if the user doesn't handle querystring parsing\n        if (typeof parsedUrl.query === 'string') {\n          parsedUrl.query = parseQs(parsedUrl.query)\n        }\n\n    \n        try {\n          return await this.ssr.run(req, res, parsedUrl)\n        } catch (err) {\n          console.error(err)\n          res.statusCode = 500\n          res.end('Internal Server Error')\n        }\n    }\n    \n}"]}