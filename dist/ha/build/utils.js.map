{"version":3,"sources":["utils.js"],"names":["findPagesMapDir","dir","curDir","path","join","Error","collectPages","pagesMapDir","pagesMap","require","urlPagesMap","Object","keys","map","key","BLOCKED_PAGES","includes","glob","sync","collectBlockPages"],"mappings":"2JAAA,kDACA,kDACA,sBACA,2C,mFAEO,QAASA,CAAAA,eAAT,CAAyBC,GAAzB,CAA8B,CACjC,GAAIC,CAAAA,MAAM,CAAGC,cAAKC,IAAL,CAAUH,GAAV,CAAe,aAAf,CAAb,CACA,GAAI,mBAAWC,MAAX,CAAJ,CAAwB,MAAOA,CAAAA,MAAP,CAExBA,MAAM,CAAGC,cAAKC,IAAL,CAAUH,GAAV,CAAe,iBAAf,CAAT,CACA,GAAI,mBAAWC,MAAX,CAAJ,CAAwB,MAAOA,CAAAA,MAAP,CAExB;AACA,GAAI,mBAAWC,cAAKC,IAAL,CAAUH,GAAV,CAAe,IAAf,CAAqB,OAArB,CAAX,CAAJ,CAA+C,CAC7C,KAAM,IAAII,CAAAA,KAAJ,CACJ,yFADI,CAAN,CAGD,CAED,KAAM,IAAIA,CAAAA,KAAJ,CACJ,gFADI,CAAN,CAGH,CAEM,cAAeC,CAAAA,YAAf,CAA4BC,WAA5B,CAAyCN,GAAzC,CAA8C,CACjD,KAAMO,CAAAA,QAAQ,CAAGC,OAAO,CAACF,WAAD,CAAxB,CACA,KAAMG,CAAAA,WAAW,CAAG,EAApB,CACAC,MAAM,CAACC,IAAP,CAAYJ,QAAZ,EAAsBK,GAAtB,CAA0BC,GAAG,EAAI,CAC/B,GAAIC,yBAAcC,QAAd,CAAuBF,GAAvB,CAAJ,CAAiC,CAC/BJ,WAAW,CAACI,GAAD,CAAX,CAAmBX,cAAKC,IAAL,CAAUH,GAAV,CAAeO,QAAQ,CAACM,GAAD,CAAvB,CAAnB,CACA,OACD,CACDJ,WAAW,CAACI,GAAD,CAAX,CAAmBG,cAAKC,IAAL,CAAW,GAAEf,cAAKC,IAAL,CAAUH,GAAV,CAAeO,QAAQ,CAACM,GAAD,CAAvB,CAA8B,0BAA3C,CAAnB,CACD,CAND,EAQA,MAAOJ,CAAAA,WAAP,CACH,CAEM,cAAeS,CAAAA,iBAAf,CAAiCZ,WAAjC,CAA8CN,GAA9C,CAAmD,CACtD,KAAMO,CAAAA,QAAQ,CAAGC,OAAO,CAACF,WAAD,CAAxB,CACA,KAAMG,CAAAA,WAAW,CAAG,EAApB,CACAC,MAAM,CAACC,IAAP,CAAYJ,QAAZ,EAAsBK,GAAtB,CAA0BC,GAAG,EAAI,CAC/B,GAAIC,yBAAcC,QAAd,CAAuBF,GAAvB,CAAJ,CAAiC,CAC/BJ,WAAW,CAACI,GAAD,CAAX,CAAmBX,cAAKC,IAAL,CAAUH,GAAV,CAAeO,QAAQ,CAACM,GAAD,CAAvB,CAAnB,CACD,CACF,CAJD,EAKA,MAAOJ,CAAAA,WAAP,CACH","sourcesContent":["import path from 'path';\nimport glob from 'glob';\nimport { existsSync, promises, readFileSync } from 'fs';\nimport { BLOCKED_PAGES } from '../lib/constants';\n\nexport function findPagesMapDir(dir) {\n    let curDir = path.join(dir, 'routes.json')\n    if (existsSync(curDir)) return curDir\n  \n    curDir = path.join(dir, 'src/routes.json')\n    if (existsSync(curDir)) return curDir\n  \n    // Check one level up the tree to see if the pages directory might be there\n    if (existsSync(path.join(dir, '..', 'pages'))) {\n      throw new Error(\n        '> No `pages` directory found. Did you mean to run `ha` in the parent (`../`) directory?'\n      )\n    }\n  \n    throw new Error(\n      \"> Couldn't find a `routes.json` file. Please create one under the project root\"\n    )\n}\n\nexport async function collectPages(pagesMapDir, dir) {\n    const pagesMap = require(pagesMapDir);\n    const urlPagesMap = {};\n    Object.keys(pagesMap).map(key => {\n      if (BLOCKED_PAGES.includes(key)) {\n        urlPagesMap[key] = path.join(dir, pagesMap[key]);\n        return;\n      }\n      urlPagesMap[key] = glob.sync(`${path.join(dir, pagesMap[key])}/{aIndex,aLang,aModel}.*`);\n    })\n    \n    return urlPagesMap;\n}\n\nexport async function collectBlockPages(pagesMapDir, dir) {\n    const pagesMap = require(pagesMapDir);\n    const urlPagesMap = {};\n    Object.keys(pagesMap).map(key => {\n      if (BLOCKED_PAGES.includes(key)) {\n        urlPagesMap[key] = path.join(dir, pagesMap[key]);\n      }\n    })\n    return urlPagesMap;\n}"]}