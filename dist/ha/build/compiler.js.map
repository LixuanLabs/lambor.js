{"version":3,"sources":["compiler.js"],"names":["generateStats","result","stat","errors","warnings","toJson","length","push","runCompiler","config","dev","clientConfig","serverConfig","Promise","resolve","reject","compiler","mfs","MemoryFS","outputFileSystem","watch","poll","err","statsOrMultiStats","clientDist","output","path","serverDist","clientBundles","require","REACT_LOADABLE_MANIFEST","Document","readFileSync","DOCUMENTJS","default","entryFiles","JSON","parse","ENTRY_FILES","Ssr","SERVEROUTPUT","run","stats","reduce"],"mappings":"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","sourcesContent":["import webpack from 'webpack'\nimport path from 'path';\nimport MemoryFS from 'memory-fs';\nimport requireFromString from 'require-from-string';\nimport { REACT_LOADABLE_MANIFEST, SERVER_DIRECTORY, DOCUMENTJS, ENTRY_FILES, SERVEROUTPUT } from '../lib/constants';\n\n\nfunction generateStats(result, stat) {\n  const { errors, warnings } = stat.toJson('errors-warnings')\n  if (errors.length > 0) {\n    result.errors.push(...errors)\n  }\n\n  if (warnings.length > 0) {\n    result.warnings.push(...warnings)\n  }\n\n  return result\n}\n\nexport function runCompiler(\n  config,\n  {\n    dev = false\n  }\n) {\n  const clientConfig = config[0];\n  const serverConfig = config[1];\n  return new Promise(async (resolve, reject) => {\n    const compiler = webpack(config)\n    if (dev) {\n      const mfs = new MemoryFS();\n      compiler.outputFileSystem = mfs;\n      compiler.watch(\n        {\n          poll: true\n        },\n        (err, statsOrMultiStats) => {\n          if (err) {\n            return reject(err)\n          }\n          const clientDist = clientConfig.output.path;\n          const serverDist = serverConfig.output.path;\n          const clientBundles = require(path.resolve(clientDist, REACT_LOADABLE_MANIFEST));\n          const Document = requireFromString(mfs.readFileSync(path.resolve(serverDist, DOCUMENTJS), 'utf-8')).default;\n          const entryFiles = JSON.parse(mfs.readFileSync(path.resolve(clientDist, ENTRY_FILES), 'utf-8')).default;\n          const Ssr = requireFromString(mfs.readFileSync(path.resolve(serverDist, SERVEROUTPUT), 'utf-8')).default;\n          return resolve({\n            clientBundles,\n            Document,\n            entryFiles,\n            Ssr,\n            mfs\n          })\n          // if ('stats' in statsOrMultiStats) {\n          //   const result = statsOrMultiStats.stats.reduce(\n          //     generateStats,\n          //     { errors: [], warnings: [] }\n          //   )\n          //   return resolve(result)\n          // }\n  \n          // const result = generateStats(\n          //   { errors: [], warnings: [] },\n          //   statsOrMultiStats\n          // )\n          // return resolve(result)\n        }\n      )\n    } else {\n      compiler.run(\n        (err, statsOrMultiStats) => {\n          if (err) {\n            return reject(err)\n          }\n  \n          if ('stats' in statsOrMultiStats) {\n            const result = statsOrMultiStats.stats.reduce(\n              generateStats,\n              { errors: [], warnings: [] }\n            )\n            return resolve(result)\n          }\n  \n          const result = generateStats(\n            { errors: [], warnings: [] },\n            statsOrMultiStats\n          )\n          return resolve(result)\n        }\n      )\n    }\n  })\n}\n"]}