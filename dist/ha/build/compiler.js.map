{"version":3,"sources":["compiler.js"],"names":["generateStats","result","stat","errors","warnings","toJson","length","push","runCompiler","config","dev","Promise","resolve","reject","compiler","outputFileSystem","MemoryFS","watch","err","statsOrMultiStats","stats","reduce","run"],"mappings":"qEAAA,yDACA,2D,w4BAGA,QAASA,CAAAA,aAAT,CAAuBC,MAAvB,CAA+BC,IAA/B,CAAqC,CACnC,KAAM,CAAEC,MAAF,CAAUC,QAAV,EAAuBF,IAAI,CAACG,MAAL,CAAY,iBAAZ,CAA7B,CACA,GAAIF,MAAM,CAACG,MAAP,CAAgB,CAApB,CAAuB,CACrBL,MAAM,CAACE,MAAP,CAAcI,IAAd,CAAmB,GAAGJ,MAAtB,EACD,CAED,GAAIC,QAAQ,CAACE,MAAT,CAAkB,CAAtB,CAAyB,CACvBL,MAAM,CAACG,QAAP,CAAgBG,IAAhB,CAAqB,GAAGH,QAAxB,EACD,CAED,MAAOH,CAAAA,MAAP,CACD,CAEM,QAASO,CAAAA,WAAT,CACLC,MADK,CAEL,CACEC,GAAG,CAAG,KADR,CAFK,CAKL,CACA,MAAO,IAAIC,CAAAA,OAAJ,CAAY,MAAOC,OAAP,CAAgBC,MAAhB,GAA2B,CAC5C,KAAMC,CAAAA,QAAQ,CAAG,qBAAQL,MAAR,CAAjB,CACA,GAAIC,GAAJ,CAAS,CACPI,QAAQ,CAACC,gBAAT,CAA4B,GAAIC,kBAAJ,EAA5B,CACAF,QAAQ,CAACG,KAAT,CACE,CAACC,GAAD,CAAMC,iBAAN,GAA4B,CAC1B,GAAID,GAAJ,CAAS,CACP,MAAOL,CAAAA,MAAM,CAACK,GAAD,CAAb,CACD,CAED,GAAI,SAAWC,CAAAA,iBAAf,CAAkC,CAChC,KAAMlB,CAAAA,MAAM,CAAGkB,iBAAiB,CAACC,KAAlB,CAAwBC,MAAxB,CACbrB,aADa,CAEb,CAAEG,MAAM,CAAE,EAAV,CAAcC,QAAQ,CAAE,EAAxB,CAFa,CAAf,CAIA,MAAOQ,CAAAA,OAAO,CAACX,MAAD,CAAd,CACD,CAED,KAAMA,CAAAA,MAAM,CAAGD,aAAa,CAC1B,CAAEG,MAAM,CAAE,EAAV,CAAcC,QAAQ,CAAE,EAAxB,CAD0B,CAE1Be,iBAF0B,CAA5B,CAIA,MAAOP,CAAAA,OAAO,CAACX,MAAD,CAAd,CACD,CAnBH,EAqBD,CAvBD,IAuBO,CACLa,QAAQ,CAACQ,GAAT,CACE,CAACJ,GAAD,CAAMC,iBAAN,GAA4B,CAC1B,GAAID,GAAJ,CAAS,CACP,MAAOL,CAAAA,MAAM,CAACK,GAAD,CAAb,CACD,CAED,GAAI,SAAWC,CAAAA,iBAAf,CAAkC,CAChC,KAAMlB,CAAAA,MAAM,CAAGkB,iBAAiB,CAACC,KAAlB,CAAwBC,MAAxB,CACbrB,aADa,CAEb,CAAEG,MAAM,CAAE,EAAV,CAAcC,QAAQ,CAAE,EAAxB,CAFa,CAAf,CAIA,MAAOQ,CAAAA,OAAO,CAACX,MAAD,CAAd,CACD,CAED,KAAMA,CAAAA,MAAM,CAAGD,aAAa,CAC1B,CAAEG,MAAM,CAAE,EAAV,CAAcC,QAAQ,CAAE,EAAxB,CAD0B,CAE1Be,iBAF0B,CAA5B,CAIA,MAAOP,CAAAA,OAAO,CAACX,MAAD,CAAd,CACD,CAnBH,EAqBD,CACF,CAhDM,CAAP,CAiDD","sourcesContent":["import webpack, { Stats, Configuration } from 'webpack'\nimport MemoryFS from 'memory-fs';\n\n\nfunction generateStats(result, stat) {\n  const { errors, warnings } = stat.toJson('errors-warnings')\n  if (errors.length > 0) {\n    result.errors.push(...errors)\n  }\n\n  if (warnings.length > 0) {\n    result.warnings.push(...warnings)\n  }\n\n  return result\n}\n\nexport function runCompiler(\n  config,\n  {\n    dev = false\n  }\n) {\n  return new Promise(async (resolve, reject) => {\n    const compiler = webpack(config)\n    if (dev) {\n      compiler.outputFileSystem = new MemoryFS();\n      compiler.watch(\n        (err, statsOrMultiStats) => {\n          if (err) {\n            return reject(err)\n          }\n  \n          if ('stats' in statsOrMultiStats) {\n            const result = statsOrMultiStats.stats.reduce(\n              generateStats,\n              { errors: [], warnings: [] }\n            )\n            return resolve(result)\n          }\n  \n          const result = generateStats(\n            { errors: [], warnings: [] },\n            statsOrMultiStats\n          )\n          return resolve(result)\n        }\n      )\n    } else {\n      compiler.run(\n        (err, statsOrMultiStats) => {\n          if (err) {\n            return reject(err)\n          }\n  \n          if ('stats' in statsOrMultiStats) {\n            const result = statsOrMultiStats.stats.reduce(\n              generateStats,\n              { errors: [], warnings: [] }\n            )\n            return resolve(result)\n          }\n  \n          const result = generateStats(\n            { errors: [], warnings: [] },\n            statsOrMultiStats\n          )\n          return resolve(result)\n        }\n      )\n    }\n  })\n}\n"]}