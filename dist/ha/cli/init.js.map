{"version":3,"sources":["init.js"],"names":["info","type","message","console","log","chalk","green","bold","error","red","success","template","dest","cwd","through","obj","file","enc","cb","stat","isFile","path","replace","push","haInit","argv","args","Boolean","Number","String","process","exit","_","projectName","printSuccess","__dirname","vfs","src","dot","cwdbase","pipe","on","resume"],"mappings":"4DAAA,gDACA,0BACA,mCACA,sBACA,oDACA,yDACA,yDACA,yD,mFAGA,QAASA,CAAAA,IAAT,CAAcC,IAAd,CAAoBC,OAApB,CAA6B,CACzBC,OAAO,CAACC,GAAR,CAAa,GAAEC,eAAMC,KAAN,CAAYC,IAAZ,CAAiB,qBAAQN,IAAR,CAAc,EAAd,CAAjB,CAAoC,KAAIC,OAAQ,EAA/D,EACH,CAED,QAASM,CAAAA,KAAT,CAAeN,OAAf,CAAwB,CACpBC,OAAO,CAACK,KAAR,CAAcH,eAAMI,GAAN,CAAUP,OAAV,CAAd,EACH,CAED,QAASQ,CAAAA,OAAT,CAAiBR,OAAjB,CAA0B,CACtBC,OAAO,CAACK,KAAR,CAAcH,eAAMC,KAAN,CAAYJ,OAAZ,CAAd,EACH,CACD,QAASS,CAAAA,QAAT,CAAkBC,IAAlB,CAAwBC,GAAxB,CAA6B,CACzB,MAAOC,kBAAQC,GAAR,CAAY,SAAUC,IAAV,CAAgBC,GAAhB,CAAqBC,EAArB,CAAyB,CAC1C,GAAI,CAACF,IAAI,CAACG,IAAL,CAAUC,MAAV,EAAL,CAAyB,CACvB,MAAOF,CAAAA,EAAE,EAAT,CACD,CAEDlB,IAAI,CAAC,QAAD,CAAWgB,IAAI,CAACK,IAAL,CAAUC,OAAV,CAAkBT,GAAG,CAAG,GAAxB,CAA6B,EAA7B,CAAX,CAAJ,CACA,KAAKU,IAAL,CAAUP,IAAV,EACAE,EAAE,GACH,CARM,CAAP,CASH,CAGD,KAAMM,CAAAA,MAAM,CAAIC,IAAD,EAAU,CACrB,KAAMC,CAAAA,IAAI,CAAG,iBACT,CACE;AACA,SAAUC,OAFZ,CAGE,SAAUC,MAHZ,CAIE,aAAcC,MAJhB,CAME;AACA,KAAM,QAPR,CAQE,KAAM,QARR,CASE,KAAM,YATR,CADS,CAYT,CAAEJ,IAAF,CAZS,CAAb,CAeE,GAAIC,IAAI,CAAC,QAAD,CAAR,CAAoB,CAClB;AACAvB,OAAO,CAACC,GAAR,CAAa;;;;;;;;;;;;;;;SAAb,EAgBA0B,OAAO,CAACC,IAAR,CAAa,CAAb,EACD,CACD,KAAMnB,CAAAA,IAAI,CAAG,kBAAQc,IAAI,CAACM,CAAL,CAAO,CAAP,GAAa,GAArB,CAAb,CACA,KAAMC,CAAAA,WAAW,CAAG,mBAASrB,IAAT,CAApB,CACA,QAASsB,CAAAA,YAAT,EAAwB,CACtBxB,OAAO,CAAE;+BACcuB,WAAY,OAAMrB,IAAK;;;;;;;;iBAQrCA,IAAK;;;2BATP,CAAP,CAaH,CACC,KAAMC,CAAAA,GAAG,CAAG,eAAKsB,SAAL,CAAgB,yBAAhB,CAAZ,CACA,GAAI,CAAC,mBAASvB,IAAT,CAAL,CAAqB,CACnBJ,KAAK,CAAC,kEAAD,CAAL,CACAsB,OAAO,CAACC,IAAR,CAAa,CAAb,EACD,CACDK,iBAAIC,GAAJ,CAAQ,CAAC,MAAD,CAAS,oBAAT,CAAR,CAAwC,CAACxB,GAAG,CAAEA,GAAN,CAAWyB,GAAG,CAAE,IAAhB,CAAsBC,OAAO,CAAE,IAA/B,CAAxC,EACCC,IADD,CACM7B,QAAQ,CAACC,IAAD,CAAOC,GAAP,CADd,EAEC2B,IAFD,CAEMJ,iBAAIxB,IAAJ,CAASA,IAAT,CAFN,EAGC6B,EAHD,CAGI,KAHJ,CAGW,UAAW,CACpBzC,IAAI,CAAC,QAAD,CAAW,yBAAX,CAAJ,CACA,mBAAW,eAAKY,IAAL,CAAW,WAAX,CAAX,CAAoC,eAAKA,IAAL,CAAW,YAAX,CAApC,EACAsB,YAAY,GACb,CAPD,EAQCQ,MARD,GASL,CAnED,C,aAqEelB,M","sourcesContent":["import arg from 'arg';\nimport { join, resolve, basename } from 'path';\nimport { sync as emptyDir } from 'empty-dir';\nimport { renameSync } from 'fs';\nimport chalk from 'chalk';\nimport through from 'through2';\nimport leftPad from 'left-pad';\nimport vfs from 'vinyl-fs';\n\n\nfunction info(type, message) {\n    console.log(`${chalk.green.bold(leftPad(type, 12))}  ${message}`);\n}\n\nfunction error(message) {\n    console.error(chalk.red(message));\n}\n\nfunction success(message) {\n    console.error(chalk.green(message));\n}\nfunction template(dest, cwd) {\n    return through.obj(function (file, enc, cb) {\n      if (!file.stat.isFile()) {\n        return cb();\n      }\n  \n      info('create', file.path.replace(cwd + '/', ''));\n      this.push(file);\n      cb();\n    });\n}\n\n\nconst haInit = (argv) => {\n    const args = arg(\n        {\n          // Types\n          '--help': Boolean,\n          '--port': Number,\n          '--hostname': String,\n    \n          // Aliases\n          '-h': '--help',\n          '-p': '--port',\n          '-H': '--hostname',\n        },\n        { argv }\n      )\n    \n      if (args['--help']) {\n        // tslint:disable-next-line\n        console.log(`\n          Description\n            Starts the application in production mode.\n            The application should be compiled with \\`next build\\` first.\n    \n          Usage\n            $ next start <dir> -p <port>\n    \n          <dir> represents the directory of the Next.js application.\n          If no directory is provided, the current directory will be used.\n    \n          Options\n            --port, -p      A port number on which to start the application\n            --hostname, -H  Hostname on which to start the application\n            --help, -h      Displays this message\n        `)\n        process.exit(0)\n      }\n      const dest = resolve(args._[0] || '.')\n      const projectName = basename(dest);\n      function printSuccess() {\n        success(`\n            Success! Created ${projectName} at ${dest}.\n            \n            Inside that directory, you can run several commands:\n            * npm start: Starts the development server.\n            * npm run build: Bundles the app into dist for production.\n            * npm test: Run test.\n            \n            We suggest that you begin by typing:\n            cd ${dest}\n            npm start\n            \n            Happy hacking!`);\n    }\n      const cwd = join(__dirname, '../../boilerplates/demo');\n      if (!emptyDir(dest)) {\n        error('Existing files here, please run init command in an empty folder!');\n        process.exit(1);\n      }\n      vfs.src(['**/*', '!node_modules/**/*'], {cwd: cwd, dot: true, cwdbase: true})\n      .pipe(template(dest, cwd))\n      .pipe(vfs.dest(dest))\n      .on('end', function() {\n        info('rename', 'gitignore -> .gitignore');\n        renameSync(join(dest, 'gitignore'), join(dest, '.gitignore'));\n        printSuccess();\n      })\n      .resume();\n}\n\nexport default haInit;"]}