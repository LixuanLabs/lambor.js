{"version":3,"sources":["ssr-controller.js"],"names":["SSRController","constructor","dir","staticMarkup","quiet","conf","dev","customServer","resolve","hachiConfig","distDir","publicDir","CLIENT_PUBLIC_FILES_PATH","serverBuildDir","SERVER_DIRECTORY","pagesManifestPath","PAGES_MANIFEST","pagesManifest","require","router","Router","generateRoutes","path","exact","getComponent","locale","run","req","res","parsedUrl","initApp","app","App","start","matched","execute","err","code","statusCode","renderError","render404","initModel","history","push","ctx","url","initialState","initLocale","onError","e","console","log","message","length","forEach","model","registerModel","handleRequest","apiReg","test","pathname","query","logError","end"],"mappings":"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","sourcesContent":["import { join } from 'path';\nimport dva from 'dva';\nimport { createMemoryHistory } from 'history';\nimport { parse as parseQs, ParsedUrlQuery } from 'querystring'\nimport { format as formatUrl, parse as parseUrl, UrlWithParsedQuery } from 'url'\nimport loadConfig from './config'\nimport { CLIENT_PUBLIC_FILES_PATH, SERVER_DIRECTORY, PAGES_MANIFEST } from '../lib/constants';\nimport Router from '../router';\n\n\nexport default class SSRController {\n    constructor({\n        dir = '.',\n        staticMarkup = false,\n        quiet = false,\n        conf = null,\n        dev = false,\n        customServer = true,\n    }) {\n        this.dir = resolve(dir);\n        this.hachiConfig = loadConfig(this.dir, conf);\n        this.distDir = join(this.dir, this.hachiConfig.distDir);\n        this.publicDir = join(this.dir, CLIENT_PUBLIC_FILES_PATH);\n\n        this.serverBuildDir = join(this.distDir,SERVER_DIRECTORY);\n\n        const pagesManifestPath = join(this.serverBuildDir, PAGES_MANIFEST)\n\n        if (!dev) {\n            this.pagesManifest = require(pagesManifestPath)\n        }\n        this.router = new Router(this.generateRoutes());\n\n    }\n\n    generateRoutes() {\n        return [\n            {\n                path: '/',\n                exact: true,\n                getComponent: (locale) => {\n                    return <div>getComponent</div>\n                }\n            }\n        ]\n    }\n\n    async run(\n        req,\n        res,\n        parsedUrl\n      ) {\n        this.initApp(this.router);\n        const app = this.app;\n        const App = app.start();\n        try {\n          const matched = await this.router.execute(req, res, parsedUrl)\n          if (matched) {\n            return\n          }\n        } catch (err) {\n          if (err.code === 'DECODE_FAILED') {\n            res.statusCode = 400\n            return this.renderError(null, req, res, '/_error', {})\n          }\n          throw err\n        }\n    \n        await this.render404(req, res, parsedUrl)\n    }\n\n    initApp(router, initModel) {\n        // 初始化DvaApp\n        const history = createMemoryHistory();\n        history.push(this.ctx.url);\n        let initialState = this.initLocale(this.initialState);\n\n        this.app = dva({history, initialState, onError: e => {\n            console.log(e.message);\n        }});\n        this.app.router(router);\n\n        if (initModel.length) {\n            initModel.forEach(model => {\n                registerModel(this.app, model);\n            });\n        }\n\n    }\n\n    async handleRequest(\n        req,\n        res,\n        parsedUrl\n      ){\n        // Parse url if parsedUrl not provided\n        if (!parsedUrl || typeof parsedUrl !== 'object') {\n          const url = req.url\n          parsedUrl = parseUrl(url, true)\n        }\n\n        // 检测是否为数据请求\n        if (this.hachiConfig.apiReg.test(parsedUrl.pathname)) {\n            console.log('api接口', parsedUrl.pathname);\n            \n        }\n    \n        // Parse the querystring ourselves if the user doesn't handle querystring parsing\n        if (typeof parsedUrl.query === 'string') {\n          parsedUrl.query = parseQs(parsedUrl.query)\n        }\n    \n        res.statusCode = 200\n        try {\n          return await this.run(req, res, parsedUrl)\n        } catch (err) {\n          this.logError(err)\n          res.statusCode = 500\n          res.end('Internal Server Error')\n        }\n      }\n    \n}"]}