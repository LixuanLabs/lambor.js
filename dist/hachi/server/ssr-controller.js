"use strict";exports.__esModule=true;exports.default=void 0;var _path=require("path");var _dva=_interopRequireDefault(require("dva"));var _history=require("history");var _querystring=require("querystring");var _url=require("url");var _config=_interopRequireWildcard(require("./config"));var _constants=require("../lib/constants");var _router=_interopRequireDefault(require("../router"));function _getRequireWildcardCache(){if(typeof WeakMap!=="function")return null;var cache=new WeakMap();_getRequireWildcardCache=function(){return cache;};return cache;}function _interopRequireWildcard(obj){if(obj&&obj.__esModule){return obj;}if(obj===null||typeof obj!=="object"&&typeof obj!=="function"){return{default:obj};}var cache=_getRequireWildcardCache();if(cache&&cache.has(obj)){return cache.get(obj);}var newObj={};var hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc);}else{newObj[key]=obj[key];}}}newObj.default=obj;if(cache){cache.set(obj,newObj);}return newObj;}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}class SSRController{constructor({dir='.',staticMarkup=false,quiet=false,conf=null,dev=false,customServer=true}){this.dir=resolve(dir);this.hachiConfig=(0,_config.default)(this.dir,conf);this.distDir=(0,_path.join)(this.dir,this.hachiConfig.distDir);this.publicDir=(0,_path.join)(this.dir,_constants.CLIENT_PUBLIC_FILES_PATH);this.serverBuildDir=(0,_path.join)(this.distDir,_constants.SERVER_DIRECTORY);const pagesManifestPath=(0,_path.join)(this.serverBuildDir,_constants.PAGES_MANIFEST);if(!dev){this.pagesManifest=require(pagesManifestPath);}this.router=new _router.default(this.generateRoutes());}generateRoutes(){return[{path:'/',exact:true,getComponent:locale=>{return/*#__PURE__*/React.createElement("div",null,"getComponent");}}];}async run(req,res,parsedUrl){this.initApp(this.router);const app=this.app;const App=app.start();try{const matched=await this.router.execute(req,res,parsedUrl);if(matched){return;}}catch(err){if(err.code==='DECODE_FAILED'){res.statusCode=400;return this.renderError(null,req,res,'/_error',{});}throw err;}await this.render404(req,res,parsedUrl);}initApp(router,initModel){// 初始化DvaApp
const history=(0,_history.createMemoryHistory)();history.push(this.ctx.url);let initialState=this.initLocale(this.initialState);this.app=(0,_dva.default)({history,initialState,onError:e=>{console.log(e.message);}});this.app.router(router);if(initModel.length){initModel.forEach(model=>{registerModel(this.app,model);});}}async handleRequest(req,res,parsedUrl){// Parse url if parsedUrl not provided
if(!parsedUrl||typeof parsedUrl!=='object'){const url=req.url;parsedUrl=(0,_url.parse)(url,true);}// 检测是否为数据请求
if(this.hachiConfig.apiReg.test(parsedUrl.pathname)){console.log('api接口',parsedUrl.pathname);}// Parse the querystring ourselves if the user doesn't handle querystring parsing
if(typeof parsedUrl.query==='string'){parsedUrl.query=(0,_querystring.parse)(parsedUrl.query);}res.statusCode=200;try{return await this.run(req,res,parsedUrl);}catch(err){this.logError(err);res.statusCode=500;res.end('Internal Server Error');}}}exports.default=SSRController;