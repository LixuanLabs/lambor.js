{"version":3,"sources":["utils.js"],"names":["findPagesMapDir","dir","curDir","path","join","Error","collectPages","pagesMapDir","pagesMap","require","obj","Object","keys","map","key"],"mappings":"+GAAA,kDACA,sBACA,2C,mFAEO,QAASA,CAAAA,eAAT,CAAyBC,GAAzB,CAA8B,CACjC,GAAIC,CAAAA,MAAM,CAAGC,cAAKC,IAAL,CAAUH,GAAV,CAAe,aAAf,CAAb,CACA,GAAI,mBAAWC,MAAX,CAAJ,CAAwB,MAAOA,CAAAA,MAAP,CAExBA,MAAM,CAAGC,cAAKC,IAAL,CAAUH,GAAV,CAAe,iBAAf,CAAT,CACA,GAAI,mBAAWC,MAAX,CAAJ,CAAwB,MAAOA,CAAAA,MAAP,CAExB;AACA,GAAI,mBAAWC,cAAKC,IAAL,CAAUH,GAAV,CAAe,IAAf,CAAqB,OAArB,CAAX,CAAJ,CAA+C,CAC7C,KAAM,IAAII,CAAAA,KAAJ,CACJ,4FADI,CAAN,CAGD,CAED,KAAM,IAAIA,CAAAA,KAAJ,CACJ,gFADI,CAAN,CAGH,CAEM,cAAeC,CAAAA,YAAf,CAA4BC,WAA5B,CAAyC,CAC5C,KAAMC,CAAAA,QAAQ,CAAGC,OAAO,CAACF,WAAD,CAAxB,CACA,KAAMG,CAAAA,GAAG,CAAG,EAAZ,CACAC,MAAM,CAACC,IAAP,CAAYJ,QAAZ,EAAsBK,GAAtB,CAA0BC,GAAG,EAAI,CAC7BJ,GAAG,CAACI,GAAG,CAAG,SAAP,CAAH,CAAuBN,QAAQ,CAACM,GAAD,CAAR,CAAgB,WAAvC,CACAJ,GAAG,CAACI,GAAG,CAAG,SAAP,CAAH,CAAuBN,QAAQ,CAACM,GAAD,CAAR,CAAgB,WAAvC,CACAJ,GAAG,CAACI,GAAG,CAAG,QAAP,CAAH,CAAsBN,QAAQ,CAACM,GAAD,CAAR,CAAgB,UAAtC,CACH,CAJD,EAKA,MAAOJ,CAAAA,GAAP,CACH","sourcesContent":["import path from 'path';\nimport { existsSync, promises, readFileSync } from 'fs';\nimport { BLOCKED_PAGES } from '../lib/constants';\n\nexport function findPagesMapDir(dir) {\n    let curDir = path.join(dir, 'routes.json')\n    if (existsSync(curDir)) return curDir\n  \n    curDir = path.join(dir, 'src/routes.json')\n    if (existsSync(curDir)) return curDir\n  \n    // Check one level up the tree to see if the pages directory might be there\n    if (existsSync(path.join(dir, '..', 'pages'))) {\n      throw new Error(\n        '> No `pages` directory found. Did you mean to run `hachi` in the parent (`../`) directory?'\n      )\n    }\n  \n    throw new Error(\n      \"> Couldn't find a `routes.json` file. Please create one under the project root\"\n    )\n}\n\nexport async function collectPages(pagesMapDir) {\n    const pagesMap = require(pagesMapDir);\n    const obj = {};\n    Object.keys(pagesMap).map(key => {\n        obj[key + '/aModel'] = pagesMap[key] + 'aModel.js';\n        obj[key + '/aIndex'] = pagesMap[key] + 'aIndex.js';\n        obj[key + '/aLang'] = pagesMap[key] + 'aLang.js';\n    })\n    return obj;\n}"]}