{"version":3,"sources":["router.js"],"names":["Router","constructor","routes","matchComponents","app","pathname","components","preload","map","routers","route","preloadFun","component","push","then","res","default","i","hasOwnProperty","registerModel","Promise","all","catch","e","console","log","execute","req","parsedUrl"],"mappings":"4DAAA,sDAEe,KAAMA,CAAAA,MAAO,CACxBC,WAAW,CAACC,MAAD,CAAS,CAChB,KAAKA,MAAL,CAAcA,MAAd,CACH,CAED,KAAMC,CAAAA,eAAN,CAAsBC,GAAtB,CAA2BC,QAA3B,CAAqC,CACjC;AACA,KAAMC,CAAAA,UAAU,CAAG,EAAnB,CACA,KAAMC,CAAAA,OAAO,CAAG,EAAhB,CACA,mCAAY,KAAKL,MAAjB,CAAyBG,QAAzB,EAAmCG,GAAnC,CAAwCC,OAAD,EAAa,CAChD,KAAMC,CAAAA,KAAK,CAAGD,OAAO,CAACC,KAAtB,CACA,KAAMC,CAAAA,UAAU,CAAGD,KAAK,CAACE,SAAN,CAAgB,SAAhB,CAAnB,CACA,GAAI,CAACD,UAAL,CAAiB,CACbL,UAAU,CAACO,IAAX,CAAgBH,KAAK,CAACE,SAAtB,EACH,CAFD,IAEO,CACHL,OAAO,CAACM,IAAR,CAAaF,UAAU,GAAGG,IAAb,CAAkBC,GAAG,EAAI,CAClC,GAAIA,GAAG,CAACC,OAAR,CAAiB,CACbV,UAAU,CAACO,IAAX,CAAgBE,GAAG,CAACC,OAApB,EACH,CAFD,IAEO,CACH,IAAK,GAAIC,CAAAA,CAAT,GAAcF,CAAAA,GAAd,CAAmB,CACf,GAAIA,GAAG,CAACG,cAAJ,CAAmBD,CAAnB,CAAJ,CAA2B,CACvB,GAAIF,GAAG,CAACE,CAAD,CAAH,CAAOD,OAAP,CAAeE,cAAf,CAA8B,WAA9B,CAAJ,CAAgD,CAC5CC,aAAa,CAACf,GAAD,CAAMW,GAAG,CAACE,CAAD,CAAT,CAAb,CACH,CAFD,IAEO,CACHX,UAAU,CAACO,IAAX,CAAgBE,GAAG,CAACE,CAAD,CAAH,CAAOD,OAAvB,EACH,CACJ,CACJ,CACJ,CACJ,CAdY,CAAb,EAeH,CACJ,CAtBD,EAwBA,KAAMI,CAAAA,OAAO,CAACC,GAAR,CAAYd,OAAZ,EAAqBe,KAArB,CAA4BC,CAAD,EAAO,CACpCC,OAAO,CAACC,GAAR,CAAY,wBAAZ,CAAsCF,CAAtC,EAEH,CAHK,CAAN,CAIA,MAAOjB,CAAAA,UAAP,CACH,CAED,KAAMoB,CAAAA,OAAN,CAAcC,GAAd,CAAmBZ,GAAnB,CAAwBa,SAAxB,CAAmC,CAC/B,KAAKzB,eAAL,GACH,CA1CuB,C","sourcesContent":["import { matchRoutes } from 'react-router-config';\n\nexport default class Router {\n    constructor(routes) {\n        this.routes = routes;\n    }\n\n    async matchComponents(app, pathname) {\n        // 组件匹配（包含Loadable组件）\n        const components = [];\n        const preload = [];\n        matchRoutes(this.routes, pathname).map((routers) => {\n            const route = routers.route;\n            const preloadFun = route.component['preload'];\n            if (!preloadFun) {\n                components.push(route.component);\n            } else {\n                preload.push(preloadFun().then(res => {\n                    if (res.default) {\n                        components.push(res.default);\n                    } else {\n                        for (let i in res) {\n                            if (res.hasOwnProperty(i)) {\n                                if (res[i].default.hasOwnProperty('namespace')) {\n                                    registerModel(app, res[i]);\n                                } else {\n                                    components.push(res[i].default);\n                                }\n                            }\n                        }\n                    }\n                }));\n            }\n        });\n    \n        await Promise.all(preload).catch((e) => {\n            console.log('matchComponents error:', e);\n    \n        });\n        return components;\n    }\n\n    async execute(req, res, parsedUrl) {\n        this.matchComponents()\n    }\n}"]}